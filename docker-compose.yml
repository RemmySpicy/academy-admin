version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: academy_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: academy_db
      POSTGRES_USER: academy_user
      POSTGRES_PASSWORD: academy_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U academy_user -d academy_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: academy_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Development Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: academy_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://academy_user:academy_password@postgres:5432/academy_db
      - REDIS_URL=redis://redis:6379
      - DEBUG=true
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: academy_frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Management Tool (Optional)
  adminer:
    image: adminer:latest
    container_name: academy_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DEFAULT_DB_NAME: academy_db

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: academy_network