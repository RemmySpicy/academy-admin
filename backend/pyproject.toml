[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "academy-admin-backend"
version = "1.0.0"
description = "Academy Admin Backend API"
authors = [
    {name = "Academy Admin Team", email = "admin@academy.com"},
]
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
    "fastapi>=0.115.12",
    "uvicorn[standard]>=0.32.1",
    "sqlalchemy>=2.0.36",
    "pydantic[email]>=2.10.4",
    "pydantic-settings>=2.10.1",
    "alembic>=1.14.0",
    "celery>=5.4.0",
    "passlib[bcrypt]>=1.7.4",
    "pyjwt>=2.10.1",
    "python-multipart>=0.0.17",
    "jinja2>=3.1.4",
    "python-dotenv>=1.0.1",
    "httpx>=0.28.1",
    "redis>=5.2.1",
    "psycopg2-binary>=2.9.10",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=4.0.0",
    "pytest-env>=1.1.3",
    "pytest-timeout>=2.2.0",
    "black>=23.12.1",
    "isort>=5.13.2",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/academy-admin/backend"
Repository = "https://github.com/academy-admin/backend"
Issues = "https://github.com/academy-admin/backend/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "celery.*",
    "passlib.*",
    "pydantic.*",
    "sqlalchemy.*",
    "pytest.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=70",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow tests",
    "auth: Authentication tests",
    "database: Database tests",
    "api: API tests",
    "student: Student feature tests",
    "curriculum: Curriculum feature tests",
    "location: Location feature tests",
    "scheduling: Scheduling feature tests",
]
env = [
    "TESTING=1",
    "DATABASE_URL=postgresql://admin:password@localhost:5432/academy_admin_test",
    "SECRET_KEY=test-secret-key-only-for-testing",
    "DEBUG=false",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
timeout = 30

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
max-complexity = 10
exclude = [
    ".git",
    "__pycache__",
    "migrations",
    "venv",
    ".venv",
    "alembic",
]